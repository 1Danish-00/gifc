#!/usr/bin/env python3

import os
import pprint
import argparse
import tempfile
import subprocess

import requests

parser = argparse.ArgumentParser(description='Github gists from command line')
sp = parser.add_subparsers(dest='main')
sp.required = True

#Get gists
p1 = sp.add_parser('get')
p1.add_argument('number', help='Get <number> gists and their descriptions', type=int)
#Create gists
p2 = sp.add_parser('create')
p2.add_argument('gist_item', help='Gist full file name')
p2.add_argument('-d', '--describe', required=True, help='Gist description')
p2.add_argument('-p','--public', help='Make a public gist', default='false')
p2_mutex = p2.add_mutually_exclusive_group()
p2_mutex.add_argument('-m','--message', help='Gist contents from cli as string')
p2_mutex.add_argument('-f','--file', help='Gist contents from a local file')
p2_mutex.add_argument('-i','--interactive', nargs='?', action='store', choices=['vi', 'nano', 'gedit'], help='Get contents of the gist right now from an editor')
#Update gists
p3 = sp.add_parser('update')
p3.add_argument('gist_id', help='Gist id(sha) of the gist you want to update')
p3.add_argument('-f','--file_name', nargs='?', action='store', help='File name of the file inside the gist you are updating')
#parser.add_argument('-nc','--new_content', help='New content string')
p3.add_argument('-cd','--change_description', nargs='?', action='store', help='Change the gist description')
#Delete gists
p4 = sp.add_parser('delete')
p4.add_argument('gist_id', help='Gist id(sha) of the gist you want to delete')
#Delete files
p5 = sp.add_parser('remove')
p5.add_argument('gist_id', help='Gist id(sha) of the gist you want to remove files from')
p5.add_argument('-r', '--remove', nargs='+', required=True, help='File(s) you want to remove from a gist')

args = parser.parse_args()

def get_config_details(key):
    if key in os.environ:
        return os.environ[key]
    else:
        print('Environment Variable not set. Please set and try again')
        exit()

class Color:
    red = '\x1b[1;31;47m'
    green = '\x1b[1;32;40m'
    yellow = '\x1b[1;33;40m'
    white = '\x1b[1;30;50m'
    bold = '\033[1m'
    end = '\x1b[0m'

def pretty_print(gist_list):
    for gist in gist_list:
        print('Description: ', Color.red+gist['Description']+Color.end)
        print('Files      : ', gist['Files'])
        print('Gist ID    : ', Color.white+gist['Gist ID']+Color.end)
        print(''.center(os.get_terminal_size(1)[0], '~'))

# Get particular gist   https://api.github.com/gists/aa5a315d61ae9438b18d
#Get gists
if args.main == 'get':
    number_of_gists = args.number
    print('Getting gists...')
    user_id = get_config_details('GIT_USER_ID')
    r = requests.get(f'https://api.github.com/users/{user_id}/gists')
    gist_list = []
    for gist in r.json()[:number_of_gists]:
        gist_id = gist['id']
        gist_description = gist['description']
        gist_files = [file_ for file_ in gist['files'].keys()]
        gist_list.append({'Description': gist_description,'Gist ID': gist_id, 'Files': gist_files})
    pretty_print(gist_list)


# Create gists
if args.main == 'create':
    #print(args['create'])
    gist_file = args.gist_item
    header = {"Authorization": f"Bearer {get_config_details('GIT_TOKEN')}"}

    if args.message:
        message = args.message
        payload = {'description': args.describe, 'public': args.public, 'files':{args.gist_item : {'content': message}}}
        #print(payload)
        r = requests.post(f"https://api.github.com/gists", headers=header, json=payload)
        print(r.status_code)
        if r.status_code == 201:
            print(r.json()['id'])
            print('Gist successfully created')
        else:
            print('Error creating gist. Please use GUI')
    elif args.file: #Fails if the location of the file is wrong i.e file doesn't exist
        file_ = args.file
        with open(file_, 'r') as f:
            f2s = f.read()
        payload = {'description': args.describe, 'public': args.public, 'files':{args.gist_item : {'content': f2s}}}
        r = requests.post(f"https://api.github.com/gists", headers=header, json=payload)
        print(r.status_code)
        if r.status_code == 201:
            print(r.json()['id'])
            print('Gist successfully created')
        else:
            print('Error creating gist. Please use GUI')
    else:
        try:
            check_editor = subprocess.Popen([args.interactive])
            check_editor.terminate()
        except:
            print(Color.red+'Could not open that editor. Please use another.'+Color.end)
            exit()
        f = tempfile.NamedTemporaryFile(mode='w+t', delete=False)
        f_name = f.name
        f.close()
        subprocess.run([args.interactive, f_name])
        with open(f_name) as f:
            contents = f.read()

        payload = {'description': args.describe, 'public': args.public, 'files':{args.gist_item : {'content': contents}}}
        try:
            r = requests.post(f"https://api.github.com/gists", headers=header, json=payload)
        except requests.exceptions.RequestException as e:
            print(e)
            exit()
        if r.status_code == 201:
            print(r.status_code)
            print(r.json()['id'])
            print('Gist successfully created')
        else:
            print('Creating gist failed')


#Update gists
if args.main == 'update':
    gid = args.gist_id
    header = {"Authorization": f"Bearer {get_config_details('GIT_TOKEN')}"}
    payload = dict()
    #file content changes
    if args.file_name:
        r = requests.get(f'https://api.github.com/gists/{gid}')
        if r.status_code != 200:
            print('Error getting gist contents for interactive mode')
            exit()
        f = tempfile.NamedTemporaryFile(mode='w+t', delete=False)
        n = f.name
        content = r.json()['files'][args.file_name]['content']
        f.write(content)
        f.close()
        subprocess.run(['nano', n])
        with open(n, 'r') as f:
            new_content = f.read()
        payload['files'] = {args.file_name :{'content': new_content}}
        os.remove(n)
    #gist description changes
    if args.change_description:
        payload['description'] = args.change_description

    r = requests.patch(f'https://api.github.com/gists/{gid}', headers=header, json=payload)
    print(r.status_code)
    if r.status_code == 200:
        print("Gist successfully updated")
    else:
        print("Gist failed to update. Please use GUI.")


#Delete files or gists
if args.main == 'delete':
    gid = args.gist_id
    print(f'Deleting {gid}')
    token = get_config_details('GIT_TOKEN')
    header = {'Authorization': f'Bearer {token}'}

    r = requests.delete(f'https://api.github.com/gists/{gid}', headers=header)
    #print(r.status_code)
    if r.status_code != 204:
        print('Request not completed. Maybe the gist_id is incorrect. Please try the GUI.')
        exit()
    print('Gist deleted.')

if args.main == 'remove':
    gid = args.gist_id
    files = args.remove
    pprint.pprint(f'Deleting file(s) {files}')
    token = get_config_details('GIT_TOKEN')
    header = {'Authorization': f'Bearer {token}'}
    #print(files, len(files))
    file_del_payload = dict(zip(files,[None]*len(files)))
    payload = {"files": file_del_payload}
    #print(payload)
    r = requests.patch(f'https://api.github.com/gists/{gid}', headers=header, json=payload)
    #data vs json when you have to pass "null" as json.
    if r.status_code == 422:
        print('You are trying to delete a file that does not exist. Please try again with correct file.')
        exit()
    elif r.status_code != 200:
        print('Request not completed. Please try the GUI.')
        exit()
    print('File(s) deleted.')